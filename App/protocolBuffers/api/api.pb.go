// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SurveyMessage_Action int32

const (
	SurveyMessage_CREATE SurveyMessage_Action = 0
	SurveyMessage_END    SurveyMessage_Action = 1
	SurveyMessage_DELETE SurveyMessage_Action = 2
)

var SurveyMessage_Action_name = map[int32]string{
	0: "CREATE",
	1: "END",
	2: "DELETE",
}

var SurveyMessage_Action_value = map[string]int32{
	"CREATE": 0,
	"END":    1,
	"DELETE": 2,
}

func (x SurveyMessage_Action) String() string {
	return proto.EnumName(SurveyMessage_Action_name, int32(x))
}

func (SurveyMessage_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0, 0}
}

type SurveyMessage struct {
	Id                   int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Topic                []*Topic             `protobuf:"bytes,4,rep,name=topic,proto3" json:"topic,omitempty"`
	Options              []string             `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	Action               SurveyMessage_Action `protobuf:"varint,6,opt,name=action,proto3,enum=api.SurveyMessage_Action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SurveyMessage) Reset()         { *m = SurveyMessage{} }
func (m *SurveyMessage) String() string { return proto.CompactTextString(m) }
func (*SurveyMessage) ProtoMessage()    {}
func (*SurveyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *SurveyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SurveyMessage.Unmarshal(m, b)
}
func (m *SurveyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SurveyMessage.Marshal(b, m, deterministic)
}
func (m *SurveyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SurveyMessage.Merge(m, src)
}
func (m *SurveyMessage) XXX_Size() int {
	return xxx_messageInfo_SurveyMessage.Size(m)
}
func (m *SurveyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SurveyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SurveyMessage proto.InternalMessageInfo

func (m *SurveyMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SurveyMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SurveyMessage) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SurveyMessage) GetTopic() []*Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *SurveyMessage) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *SurveyMessage) GetAction() SurveyMessage_Action {
	if m != nil {
		return m.Action
	}
	return SurveyMessage_CREATE
}

type Topic struct {
	Label                string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *Topic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topic.Unmarshal(m, b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
}
func (m *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(m, src)
}
func (m *Topic) XXX_Size() int {
	return xxx_messageInfo_Topic.Size(m)
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type SurveyResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SurveyResponse) Reset()         { *m = SurveyResponse{} }
func (m *SurveyResponse) String() string { return proto.CompactTextString(m) }
func (*SurveyResponse) ProtoMessage()    {}
func (*SurveyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *SurveyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SurveyResponse.Unmarshal(m, b)
}
func (m *SurveyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SurveyResponse.Marshal(b, m, deterministic)
}
func (m *SurveyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SurveyResponse.Merge(m, src)
}
func (m *SurveyResponse) XXX_Size() int {
	return xxx_messageInfo_SurveyResponse.Size(m)
}
func (m *SurveyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SurveyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SurveyResponse proto.InternalMessageInfo

func (m *SurveyResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SurveyResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type VoteMessage struct {
	Vote                 string   `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
	SurveyId             int32    `protobuf:"varint,2,opt,name=surveyId,proto3" json:"surveyId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteMessage) Reset()         { *m = VoteMessage{} }
func (m *VoteMessage) String() string { return proto.CompactTextString(m) }
func (*VoteMessage) ProtoMessage()    {}
func (*VoteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *VoteMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteMessage.Unmarshal(m, b)
}
func (m *VoteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteMessage.Marshal(b, m, deterministic)
}
func (m *VoteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteMessage.Merge(m, src)
}
func (m *VoteMessage) XXX_Size() int {
	return xxx_messageInfo_VoteMessage.Size(m)
}
func (m *VoteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VoteMessage proto.InternalMessageInfo

func (m *VoteMessage) GetVote() string {
	if m != nil {
		return m.Vote
	}
	return ""
}

func (m *VoteMessage) GetSurveyId() int32 {
	if m != nil {
		return m.SurveyId
	}
	return 0
}

type VoteResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteResponse) Reset()         { *m = VoteResponse{} }
func (m *VoteResponse) String() string { return proto.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()    {}
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *VoteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteResponse.Unmarshal(m, b)
}
func (m *VoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteResponse.Marshal(b, m, deterministic)
}
func (m *VoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteResponse.Merge(m, src)
}
func (m *VoteResponse) XXX_Size() int {
	return xxx_messageInfo_VoteResponse.Size(m)
}
func (m *VoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VoteResponse proto.InternalMessageInfo

func (m *VoteResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterEnum("api.SurveyMessage_Action", SurveyMessage_Action_name, SurveyMessage_Action_value)
	proto.RegisterType((*SurveyMessage)(nil), "api.SurveyMessage")
	proto.RegisterType((*Topic)(nil), "api.Topic")
	proto.RegisterType((*SurveyResponse)(nil), "api.SurveyResponse")
	proto.RegisterType((*VoteMessage)(nil), "api.VoteMessage")
	proto.RegisterType((*VoteResponse)(nil), "api.VoteResponse")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0xed, 0xe6, 0xab, 0xcd, 0xb4, 0x96, 0x38, 0x7a, 0x88, 0x01, 0x21, 0xec, 0x29, 0x1e, 0x2c,
	0x35, 0xe2, 0x41, 0xc1, 0x43, 0x69, 0x83, 0x08, 0xea, 0x61, 0x2d, 0xde, 0xd3, 0x64, 0x91, 0x40,
	0xed, 0x86, 0x6c, 0x5a, 0xf0, 0x57, 0xfb, 0x17, 0x24, 0x9b, 0xa4, 0xa6, 0xd4, 0x53, 0xf6, 0xbd,
	0x9d, 0x79, 0x6f, 0xe6, 0x65, 0xc1, 0x8e, 0xf3, 0x6c, 0x92, 0x17, 0xa2, 0x14, 0xa8, 0xc7, 0x79,
	0x46, 0x7f, 0x08, 0x9c, 0xbc, 0x6f, 0x8b, 0x1d, 0xff, 0x7e, 0xe5, 0x52, 0xc6, 0x9f, 0x1c, 0xc7,
	0xa0, 0x65, 0xa9, 0x4b, 0x7c, 0x12, 0x98, 0x4c, 0xcb, 0x52, 0x44, 0x30, 0x36, 0xf1, 0x17, 0x77,
	0x35, 0x9f, 0x04, 0x36, 0x53, 0x67, 0xf4, 0x61, 0x98, 0x72, 0x99, 0x14, 0x59, 0x5e, 0x66, 0x62,
	0xe3, 0xea, 0xea, 0xaa, 0x4b, 0xa1, 0x0f, 0x66, 0x29, 0xf2, 0x2c, 0x71, 0x0d, 0x5f, 0x0f, 0x86,
	0x21, 0x4c, 0x2a, 0xdf, 0x65, 0xc5, 0xb0, 0xfa, 0x02, 0x5d, 0xe8, 0x0b, 0x55, 0x2b, 0x5d, 0xd3,
	0xd7, 0x03, 0x9b, 0xb5, 0x10, 0x6f, 0xc0, 0x8a, 0x13, 0x25, 0x6c, 0xf9, 0x24, 0x18, 0x87, 0x17,
	0xaa, 0xf9, 0x60, 0xca, 0xc9, 0x4c, 0x15, 0xb0, 0xa6, 0x90, 0x5e, 0x81, 0x55, 0x33, 0x08, 0x60,
	0xcd, 0x59, 0x34, 0x5b, 0x46, 0x4e, 0x0f, 0xfb, 0xa0, 0x47, 0x6f, 0x0b, 0x87, 0x54, 0xe4, 0x22,
	0x7a, 0x89, 0x96, 0x91, 0xa3, 0xd1, 0x4b, 0x30, 0xd5, 0x1c, 0x78, 0x0e, 0xe6, 0x3a, 0x5e, 0xf1,
	0xb5, 0xda, 0xd5, 0x66, 0x35, 0xa0, 0x0f, 0x30, 0xae, 0x9d, 0x18, 0x97, 0xb9, 0xd8, 0xc8, 0xe3,
	0x40, 0x5c, 0xe8, 0xcb, 0x6d, 0x92, 0x70, 0x29, 0x55, 0x26, 0x03, 0xd6, 0x42, 0xfa, 0x08, 0xc3,
	0x0f, 0x51, 0xf2, 0x36, 0x49, 0x04, 0x63, 0x27, 0x4a, 0xde, 0xe8, 0xab, 0x33, 0x7a, 0x30, 0x90,
	0x4a, 0xfe, 0x39, 0x55, 0xdd, 0x26, 0xdb, 0x63, 0x1a, 0xc0, 0xa8, 0x6a, 0xdf, 0x1b, 0x77, 0x8c,
	0xc8, 0x81, 0x51, 0xb8, 0x05, 0xab, 0x1e, 0x12, 0xef, 0x61, 0x34, 0x2f, 0x78, 0x5c, 0xf2, 0x06,
	0xe3, 0x71, 0x56, 0xde, 0x59, 0x87, 0x6b, 0xc5, 0x69, 0x0f, 0xa7, 0x00, 0x4f, 0xbc, 0xac, 0x69,
	0x89, 0x9d, 0x3f, 0xe4, 0xfd, 0x23, 0x42, 0x7b, 0x53, 0x12, 0xde, 0x81, 0x51, 0x0d, 0x88, 0xd7,
	0xcd, 0xd7, 0x51, 0x75, 0x9d, 0x95, 0xbd, 0xd3, 0x3d, 0xf3, 0x67, 0xb4, 0xb2, 0xd4, 0x7b, 0xbb,
	0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x38, 0x13, 0xe6, 0x7c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SurveyClient is the client API for Survey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SurveyClient interface {
	CreateSurvey(ctx context.Context, in *SurveyMessage, opts ...grpc.CallOption) (*SurveyResponse, error)
	GetSurveys(ctx context.Context, in *Topic, opts ...grpc.CallOption) (Survey_GetSurveysClient, error)
}

type surveyClient struct {
	cc *grpc.ClientConn
}

func NewSurveyClient(cc *grpc.ClientConn) SurveyClient {
	return &surveyClient{cc}
}

func (c *surveyClient) CreateSurvey(ctx context.Context, in *SurveyMessage, opts ...grpc.CallOption) (*SurveyResponse, error) {
	out := new(SurveyResponse)
	err := c.cc.Invoke(ctx, "/api.Survey/CreateSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyClient) GetSurveys(ctx context.Context, in *Topic, opts ...grpc.CallOption) (Survey_GetSurveysClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Survey_serviceDesc.Streams[0], "/api.Survey/GetSurveys", opts...)
	if err != nil {
		return nil, err
	}
	x := &surveyGetSurveysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Survey_GetSurveysClient interface {
	Recv() (*SurveyMessage, error)
	grpc.ClientStream
}

type surveyGetSurveysClient struct {
	grpc.ClientStream
}

func (x *surveyGetSurveysClient) Recv() (*SurveyMessage, error) {
	m := new(SurveyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SurveyServer is the server API for Survey service.
type SurveyServer interface {
	CreateSurvey(context.Context, *SurveyMessage) (*SurveyResponse, error)
	GetSurveys(*Topic, Survey_GetSurveysServer) error
}

func RegisterSurveyServer(s *grpc.Server, srv SurveyServer) {
	s.RegisterService(&_Survey_serviceDesc, srv)
}

func _Survey_CreateSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServer).CreateSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Survey/CreateSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServer).CreateSurvey(ctx, req.(*SurveyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Survey_GetSurveys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Topic)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SurveyServer).GetSurveys(m, &surveyGetSurveysServer{stream})
}

type Survey_GetSurveysServer interface {
	Send(*SurveyMessage) error
	grpc.ServerStream
}

type surveyGetSurveysServer struct {
	grpc.ServerStream
}

func (x *surveyGetSurveysServer) Send(m *SurveyMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Survey_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Survey",
	HandlerType: (*SurveyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSurvey",
			Handler:    _Survey_CreateSurvey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSurveys",
			Handler:       _Survey_GetSurveys_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

// VoteClient is the client API for Vote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VoteClient interface {
	Vote(ctx context.Context, in *VoteMessage, opts ...grpc.CallOption) (*VoteResponse, error)
}

type voteClient struct {
	cc *grpc.ClientConn
}

func NewVoteClient(cc *grpc.ClientConn) VoteClient {
	return &voteClient{cc}
}

func (c *voteClient) Vote(ctx context.Context, in *VoteMessage, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/api.Vote/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoteServer is the server API for Vote service.
type VoteServer interface {
	Vote(context.Context, *VoteMessage) (*VoteResponse, error)
}

func RegisterVoteServer(s *grpc.Server, srv VoteServer) {
	s.RegisterService(&_Vote_serviceDesc, srv)
}

func _Vote_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Vote/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).Vote(ctx, req.(*VoteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vote_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Vote",
	HandlerType: (*VoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _Vote_Vote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
